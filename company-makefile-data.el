;; -*- no-byte-compile: t -*-
((keyword #("include" 0 1 (annot "<Keyword>" meta "Builtin" type :keyword index nil)) #("endif" 0 1 (annot "<Keyword>" meta "Builtin" type :keyword index nil)) #("else" 0 1 (annot "<Keyword>" meta "Builtin" type :keyword index nil)) #("vpath" 0 1 (annot "<Keyword>" meta "Builtin" type :keyword index nil)) #("unexport" 0 1 (annot "<Keyword>" meta "Builtin" type :keyword index nil)) #("override" 0 1 (annot "<Keyword>" meta "Builtin" type :keyword index nil)) #("override define" 0 1 (annot "<Keyword>" meta "Builtin" type :keyword index nil)) #("export" 0 1 (annot "<Keyword>" meta "Builtin" type :keyword index nil)) #("endef" 0 1 (annot "<Keyword>" meta "Builtin" type :keyword index nil)) #("define" 0 1 (annot "<Keyword>" meta "Builtin" type :keyword index nil)) #("-include" 0 1 (annot "<Keyword>" meta "Builtin" type :keyword index nil)) #("ifneq" 0 1 (annot "<Keyword>" meta "Builtin" type :keyword index nil)) #("ifeq" 0 1 (annot "<Keyword>" meta "Builtin" type :keyword index nil)) #("ifndef" 0 1 (annot "<Keyword>" meta "Builtin" type :keyword index nil)) #("ifdef" 0 1 (annot "<Keyword>" meta "Builtin" type :keyword index nil)) #("sinclude" 0 1 (annot "<Keyword>" meta "Builtin" type :keyword index nil)) #("-sinclude" 0 1 (annot "<Keyword>" meta "Builtin" type :keyword index nil)) #("-sinclude" 0 1 (annot "<Keyword>" meta "Builtin" type :keyword index nil)) #("sinclude" 0 1 (annot "<Keyword>" meta "Builtin" type :keyword index nil)) #("ifdef" 0 1 (annot "<Keyword>" meta "Builtin" type :keyword index nil)) #("ifndef" 0 1 (annot "<Keyword>" meta "Builtin" type :keyword index nil)) #("ifeq" 0 1 (annot "<Keyword>" meta "Builtin" type :keyword index nil)) #("ifneq" 0 1 (annot "<Keyword>" meta "Builtin" type :keyword index nil)) #("-include" 0 1 (annot "<Keyword>" meta "Builtin" type :keyword index nil)) #("define" 0 1 (annot "<Keyword>" meta "Builtin" type :keyword index nil)) #("endef" 0 1 (annot "<Keyword>" meta "Builtin" type :keyword index nil)) #("export" 0 1 (annot "<Keyword>" meta "Builtin" type :keyword index nil)) #("override define" 0 1 (annot "<Keyword>" meta "Builtin" type :keyword index nil)) #("override" 0 1 (annot "<Keyword>" meta "Builtin" type :keyword index nil)) #("unexport" 0 1 (annot "<Keyword>" meta "Builtin" type :keyword index nil)) #("vpath" 0 1 (annot "<Keyword>" meta "Builtin" type :keyword index nil)) #("else" 0 1 (annot "<Keyword>" meta "Builtin" type :keyword index nil)) #("endif" 0 1 (annot "<Keyword>" meta "Builtin" type :keyword index nil)) #("include" 0 1 (annot "<Keyword>" meta "Builtin" type :keyword index nil))) (function #("realpath" 0 1 (annot "<Function>" meta "Builtin" type :function index nil)) #("abspath" 0 1 (annot "<Function>" meta "Builtin" type :function index nil)) #("shell" 0 1 (annot "<Function>" meta "Builtin" type :function index nil)) #("origin" 0 1 (annot "<Function>" meta "Builtin" type :function index nil)) #("foreach" 0 1 (annot "<Function>" meta "Builtin" type :function index nil)) #("wildcard" 0 1 (annot "<Function>" meta "Builtin" type :function index nil)) #("firstword" 0 1 (annot "<Function>" meta "Builtin" type :function index nil)) #("words" 0 1 (annot "<Function>" meta "Builtin" type :function index nil)) #("word" 0 1 (annot "<Function>" meta "Builtin" type :function index nil)) #("join" 0 1 (annot "<Function>" meta "Builtin" type :function index nil)) #("addsuffix" 0 1 (annot "<Function>" meta "Builtin" type :function index nil)) #("addprefix" 0 1 (annot "<Function>" meta "Builtin" type :function index nil)) #("basename" 0 1 (annot "<Function>" meta "Builtin" type :function index nil)) #("suffix" 0 1 (annot "<Function>" meta "Builtin" type :function index nil)) #("notdir" 0 1 (annot "<Function>" meta "Builtin" type :function index nil)) #("dir" 0 1 (annot "<Function>" meta "Builtin" type :function index nil)) #("sort" 0 1 (annot "<Function>" meta "Builtin" type :function index nil)) #("filter-out" 0 1 (annot "<Function>" meta "Builtin" type :function index nil)) #("filter" 0 1 (annot "<Function>" meta "Builtin" type :function index nil)) #("findstring" 0 1 (annot "<Function>" meta "Builtin" type :function index nil)) #("strip" 0 1 (annot "<Function>" meta "Builtin" type :function index nil)) #("patsubst" 0 1 (annot "<Function>" meta "Builtin" type :function index nil)) #("subst" 0 1 (annot "<Function>" meta "Builtin" type :function index nil)) #("subst" 0 1 (annot "<Function>" meta "Builtin" type :function index nil)) #("patsubst" 0 1 (annot "<Function>" meta "Builtin" type :function index nil)) #("strip" 0 1 (annot "<Function>" meta "Builtin" type :function index nil)) #("findstring" 0 1 (annot "<Function>" meta "Builtin" type :function index nil)) #("filter" 0 1 (annot "<Function>" meta "Builtin" type :function index nil)) #("filter-out" 0 1 (annot "<Function>" meta "Builtin" type :function index nil)) #("sort" 0 1 (annot "<Function>" meta "Builtin" type :function index nil)) #("dir" 0 1 (annot "<Function>" meta "Builtin" type :function index nil)) #("notdir" 0 1 (annot "<Function>" meta "Builtin" type :function index nil)) #("suffix" 0 1 (annot "<Function>" meta "Builtin" type :function index nil)) #("basename" 0 1 (annot "<Function>" meta "Builtin" type :function index nil)) #("addprefix" 0 1 (annot "<Function>" meta "Builtin" type :function index nil)) #("addsuffix" 0 1 (annot "<Function>" meta "Builtin" type :function index nil)) #("join" 0 1 (annot "<Function>" meta "Builtin" type :function index nil)) #("word" 0 1 (annot "<Function>" meta "Builtin" type :function index nil)) #("words" 0 1 (annot "<Function>" meta "Builtin" type :function index nil)) #("firstword" 0 1 (annot "<Function>" meta "Builtin" type :function index nil)) #("wildcard" 0 1 (annot "<Function>" meta "Builtin" type :function index nil)) #("foreach" 0 1 (annot "<Function>" meta "Builtin" type :function index nil)) #("origin" 0 1 (annot "<Function>" meta "Builtin" type :function index nil)) #("shell" 0 1 (annot "<Function>" meta "Builtin" type :function index nil)) #("abspath" 0 1 (annot "<Function>" meta "Builtin" type :function index nil)) #("realpath" 0 1 (annot "<Function>" meta "Builtin" type :function index nil))) (autovar #("*" 0 1 (annot "<AutoVar>" meta "Stem of implicit rule, eg. target=dir/a.foo.a, pattern=a.%.b, then dir/a" type :autovar index nil)) #("|" 0 1 (annot "<AutoVar>" meta "Names of all order-only prerequisites" type :autovar index nil)) #("+" 0 1 (annot "<AutoVar>" meta "Like '^', but with duplicates" type :autovar index nil)) #("^" 0 1 (annot "<AutoVar>" meta "Names of all prerequisites (no duplicates)" type :autovar index nil)) #("?" 0 1 (annot "<AutoVar>" meta "Names of all prerequisites newer than target" type :autovar index nil)) #("<" 0 1 (annot "<AutoVar>" meta "Name of first prerequisite" type :autovar index nil)) #("%" 0 1 (annot "<AutoVar>" meta "Target member name, eg. target=foo.a(bar.o), then '$%'=bar.o and '$@'=foo.a" type :autovar index nil)) #("@" 0 1 (annot "<AutoVar>" meta "Target name" type :autovar index nil)) #("^F" 0 1 (annot "<AutoVar>" meta "List of basenames of all prereqs." type :autovar index nil)) #("<F" 0 1 (annot "<AutoVar>" meta "Basename part of first prereq." type :autovar index nil)) #("+D" 0 1 (annot "<AutoVar>" meta "$(patsubst %/,%,$(dir $+))" type :autovar index nil)) #("*D" 0 1 (annot "<AutoVar>" meta "Directory part of stem." type :autovar index nil)) #("%D" 0 1 (annot "<AutoVar>" meta "Directory part of target archive member name." type :autovar index nil)) #("^D" 0 1 (annot "<AutoVar>" meta "List of directory parts of all prereqs." type :autovar index nil)) #("+F" 0 1 (annot "<AutoVar>" meta "$(notdir $+)" type :autovar index nil)) #("*F" 0 1 (annot "<AutoVar>" meta "Basename part of stem." type :autovar index nil)) #("%F" 0 1 (annot "<AutoVar>" meta "Basename part of target archive member name." type :autovar index nil)) #("@F" 0 1 (annot "<AutoVar>" meta "Basename of target." type :autovar index nil)) #("@D" 0 1 (annot "<AutoVar>" meta "Directory part of file name of target with trailing slash removed." type :autovar index nil)) #("?D" 0 1 (annot "<AutoVar>" meta "List of directory parts of all prereqs newer than target." type :autovar index nil)) #("?F" 0 1 (annot "<AutoVar>" meta "List of basenames of all prereqs newer than target." type :autovar index nil)) #("<D" 0 1 (annot "<AutoVar>" meta "Directory part of first prereq." type :autovar index nil))) (implicit #("LINTFLAGS" 0 1 (annot "<Implicit>" meta "Extra flags to give to lint." type :implicit index "index-LINTFLAGS")) #("RFLAGS" 0 1 (annot "<Implicit>" meta "Extra flags to give to the Fortran compiler for Ratfor programs." type :implicit index "index-RFLAGS")) #("PFLAGS" 0 1 (annot "<Implicit>" meta "Extra flags to give to the Pascal compiler." type :implicit index "index-PFLAGS")) #("YFLAGS" 0 1 (annot "<Implicit>" meta "Extra flags to give to Yacc." type :implicit index "index-YFLAGS")) #("LFLAGS" 0 1 (annot "<Implicit>" meta "Extra flags to give to Lex." type :implicit index "index-LFLAGS")) #("LDLIBS" 0 1 (annot "<Implicit>" meta "Library flags or names given to compilers when they are supposed to
invoke the linker, 'ld'.  LOADLIBES is a deprecated (but
still supported) alternative to LDLIBS.  Non-library linker
flags, such as -L, should go in the LDFLAGS variable." type :implicit index "index-LDLIBS")) #("LDFLAGS" 0 1 (annot "<Implicit>" meta "Extra flags to give to compilers when they are supposed to invoke the linker,
'ld', such as -L.  Libraries (-lfoo) should be
added to the LDLIBS variable instead." type :implicit index "index-LDFLAGS")) #("GFLAGS" 0 1 (annot "<Implicit>" meta "Extra flags to give to the SCCS get program." type :implicit index "index-GFLAGS")) #("FFLAGS" 0 1 (annot "<Implicit>" meta "Extra flags to give to the Fortran compiler." type :implicit index "index-FFLAGS")) #("CPPFLAGS" 0 1 (annot "<Implicit>" meta "Extra flags to give to the C preprocessor and programs
that use it (the C and Fortran compilers)." type :implicit index "index-CPPFLAGS")) #("CXXFLAGS" 0 1 (annot "<Implicit>" meta "Extra flags to give to the C++ compiler." type :implicit index "index-CXXFLAGS")) #("CFLAGS" 0 1 (annot "<Implicit>" meta "Extra flags to give to the C compiler." type :implicit index "index-CFLAGS")) #("ASFLAGS" 0 1 (annot "<Implicit>" meta "Extra flags to give to the assembler (when explicitly
invoked on a '.s' or '.S' file)." type :implicit index "index-ASFLAGS")) #("LINK.o" 0 1 (annot "<Implicit>" meta "$(CC) $(LDFLAGS) $(TARGET_ARCH)" type :implicit index nil)) #("F77FLAGS" 0 1 (annot "<Implicit>" meta "$(FFLAGS)" type :implicit index nil)) #("TEX" 0 1 (annot "<Implicit>" meta "Program to make TeX DVI files from TeX source; default 'tex'." type :implicit index "index-TEX")) #("LINK.f" 0 1 (annot "<Implicit>" meta "$(FC) $(FFLAGS) $(LDFLAGS) $(TARGET_ARCH)" type :implicit index nil)) #("OBJC" 0 1 (annot "<Implicit>" meta "cc" type :implicit index nil)) #("MAKEINFO" 0 1 (annot "<Implicit>" meta "Program to convert a Texinfo source file into an Info file; default 'makeinfo'." type :implicit index "index-MAKEINFO")) #(".RECIPEPREFIX" 0 1 (annot "<Implicit>" meta "" type :implicit index nil)) #(".INCLUDE_DIRS" 0 1 (annot "<Implicit>" meta "/usr/include /usr/local/include /usr/include" type :implicit index nil)) #("YACC.y" 0 1 (annot "<Implicit>" meta "$(YACC) $(YFLAGS)" type :implicit index nil)) #("COMPILE.s" 0 1 (annot "<Implicit>" meta "$(AS) $(ASFLAGS) $(TARGET_MACH)" type :implicit index nil)) #("COMPILE.c" 0 1 (annot "<Implicit>" meta "$(CC) $(CFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -c" type :implicit index nil)) #("SUFFIXES" 0 1 (annot "<Implicit>" meta ".out .a .ln .o .c .cc .C .cpp .p .f .F .m .r .y .l .ym .yl .s .S .mod .sym .def .h .info .dvi .tex .texinfo .texi .txinfo .w .ch .web .sh .elc .el" type :implicit index nil)) #("LINK.F" 0 1 (annot "<Implicit>" meta "$(FC) $(FFLAGS) $(CPPFLAGS) $(LDFLAGS) $(TARGET_ARCH)" type :implicit index nil)) #("COMPILE.S" 0 1 (annot "<Implicit>" meta "$(CC) $(ASFLAGS) $(CPPFLAGS) $(TARGET_MACH) -c" type :implicit index nil)) #("COMPILE.C" 0 1 (annot "<Implicit>" meta "$(COMPILE.cc)" type :implicit index nil)) #("COFLAGS" 0 1 (annot "<Implicit>" meta "Extra flags to give to the RCS co program." type :implicit index "index-COFLAGS")) #("CXX" 0 1 (annot "<Implicit>" meta "Program for compiling C++ programs; default 'g++'." type :implicit index "index-CXX")) #("COMPILE.cc" 0 1 (annot "<Implicit>" meta "$(CXX) $(CXXFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -c" type :implicit index nil)) #("MAKEFILES" 0 1 (annot "<Implicit>" meta "" type :implicit index nil)) #("M2C" 0 1 (annot "<Implicit>" meta "Program to use to compile Modula-2 source code; default 'm2c'." type :implicit index "index-M2C")) #("COMPILE.r" 0 1 (annot "<Implicit>" meta "$(FC) $(FFLAGS) $(RFLAGS) $(TARGET_ARCH) -c" type :implicit index nil)) #("LEX.m" 0 1 (annot "<Implicit>" meta "$(LEX) $(LFLAGS) -t" type :implicit index nil)) #("LEX.l" 0 1 (annot "<Implicit>" meta "$(LEX) $(LFLAGS) -t" type :implicit index nil)) #("LEX" 0 1 (annot "<Implicit>" meta "Program to use to turn Lex grammars into source code; default 'lex'." type :implicit index "index-LEX")) #("COMPILE.def" 0 1 (annot "<Implicit>" meta "$(M2C) $(M2FLAGS) $(DEFFLAGS) $(TARGET_ARCH)" type :implicit index nil)) #("PC" 0 1 (annot "<Implicit>" meta "Program for compiling Pascal programs; default 'pc'." type :implicit index "index-PC")) #(".VARIABLES" 0 1 (annot "<Implicit>" meta "" type :implicit index nil)) #("F77" 0 1 (annot "<Implicit>" meta "$(FC)" type :implicit index nil)) #("LINK.cpp" 0 1 (annot "<Implicit>" meta "$(LINK.cc)" type :implicit index nil)) #("MAKE_COMMAND" 0 1 (annot "<Implicit>" meta "make" type :implicit index nil)) #("WEAVE" 0 1 (annot "<Implicit>" meta "Program to translate Web into TeX; default 'weave'." type :implicit index "index-WEAVE")) #("FC" 0 1 (annot "<Implicit>" meta "Program for compiling or preprocessing Fortran and Ratfor programs; default 'f77'." type :implicit index "index-FC")) #("COMPILE.p" 0 1 (annot "<Implicit>" meta "$(PC) $(PFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -c" type :implicit index nil)) #("PREPROCESS.S" 0 1 (annot "<Implicit>" meta "$(CC) -E $(CPPFLAGS)" type :implicit index nil)) #("AS" 0 1 (annot "<Implicit>" meta "Program for compiling assembly files; default 'as'." type :implicit index "index-AS")) #("MAKE" 0 1 (annot "<Implicit>" meta "$(MAKE_COMMAND)" type :implicit index nil)) #("COMPILE.m" 0 1 (annot "<Implicit>" meta "$(OBJC) $(OBJCFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -c" type :implicit index nil)) #("MAKE_VERSION" 0 1 (annot "<Implicit>" meta "4.1" type :implicit index nil)) #("LINK.s" 0 1 (annot "<Implicit>" meta "$(CC) $(ASFLAGS) $(LDFLAGS) $(TARGET_MACH)" type :implicit index nil)) #("LINK.c" 0 1 (annot "<Implicit>" meta "$(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) $(TARGET_ARCH)" type :implicit index nil)) #("PREPROCESS.r" 0 1 (annot "<Implicit>" meta "$(FC) $(FFLAGS) $(RFLAGS) $(TARGET_ARCH) -F" type :implicit index nil)) #("LINK.S" 0 1 (annot "<Implicit>" meta "$(CC) $(ASFLAGS) $(CPPFLAGS) $(LDFLAGS) $(TARGET_MACH)" type :implicit index nil)) #("LINK.C" 0 1 (annot "<Implicit>" meta "$(LINK.cc)" type :implicit index nil)) #(".LIBPATTERNS" 0 1 (annot "<Implicit>" meta "lib%.so lib%.a" type :implicit index nil)) #("CTANGLE" 0 1 (annot "<Implicit>" meta "Program to translate C Web into C; default 'ctangle'." type :implicit index "index-CTANGLE")) #("COMPILE.F" 0 1 (annot "<Implicit>" meta "$(FC) $(FFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -c" type :implicit index nil)) #("GET" 0 1 (annot "<Implicit>" meta "Program for extracting a file from SCCS; default 'get'." type :implicit index "index-GET")) #("TANGLE" 0 1 (annot "<Implicit>" meta "Program to translate Web into Pascal; default 'tangle'." type :implicit index "index-TANGLE")) #(".FEATURES" 0 1 (annot "<Implicit>" meta "target-specific order-only second-expansion else-if shortest-stem undefine oneshell archives jobserver output-sync check-symlink load" type :implicit index nil)) #("AR" 0 1 (annot "<Implicit>" meta "Archive-maintaining program; default 'ar'." type :implicit index "index-AR")) #("YACC.m" 0 1 (annot "<Implicit>" meta "$(YACC) $(YFLAGS)" type :implicit index nil)) #("LINT.c" 0 1 (annot "<Implicit>" meta "$(LINT) $(LINTFLAGS) $(CPPFLAGS) $(TARGET_ARCH)" type :implicit index nil)) #("LINT" 0 1 (annot "<Implicit>" meta "Program to use to run lint on source code; default 'lint'." type :implicit index "index-LINT")) #("LINK.r" 0 1 (annot "<Implicit>" meta "$(FC) $(FFLAGS) $(RFLAGS) $(LDFLAGS) $(TARGET_ARCH)" type :implicit index nil)) #("ARFLAGS" 0 1 (annot "<Implicit>" meta "Flags to give the archive-maintaining program; default 'rv'." type :implicit index "index-ARFLAGS")) #("COMPILE.mod" 0 1 (annot "<Implicit>" meta "$(M2C) $(M2FLAGS) $(MODFLAGS) $(TARGET_ARCH)" type :implicit index nil)) #("YACC" 0 1 (annot "<Implicit>" meta "Program to use to turn Yacc grammars into source code; default 'yacc'." type :implicit index "index-YACC")) #("TEXI2DVI" 0 1 (annot "<Implicit>" meta "Program to make TeX DVI files from Texinfo source; default 'texi2dvi'." type :implicit index "index-TEXI2DVI")) #("LD" 0 1 (annot "<Implicit>" meta "ld" type :implicit index nil)) #("MAKE_HOST" 0 1 (annot "<Implicit>" meta "x86_64-pc-linux-gnu" type :implicit index nil)) #("LINK.cc" 0 1 (annot "<Implicit>" meta "$(CXX) $(CXXFLAGS) $(CPPFLAGS) $(LDFLAGS) $(TARGET_ARCH)" type :implicit index nil)) #("CPP" 0 1 (annot "<Implicit>" meta "Program for running the C preprocessor, with results to standard output; default '$(CC) -E'." type :implicit index "index-CPP")) #("CHECKOUT,v" 0 1 (annot "<Implicit>" meta "+$(if $(wildcard $@),,$(CO) $(COFLAGS) $< $@)" type :implicit index nil)) #("COMPILE.f" 0 1 (annot "<Implicit>" meta "$(FC) $(FFLAGS) $(TARGET_ARCH) -c" type :implicit index nil)) #("CC" 0 1 (annot "<Implicit>" meta "Program for compiling C programs; default 'cc'." type :implicit index "index-CC")) #("LINK.p" 0 1 (annot "<Implicit>" meta "$(PC) $(PFLAGS) $(CPPFLAGS) $(LDFLAGS) $(TARGET_ARCH)" type :implicit index nil)) #("COMPILE.cpp" 0 1 (annot "<Implicit>" meta "$(COMPILE.cc)" type :implicit index nil)) #("OUTPUT_OPTION" 0 1 (annot "<Implicit>" meta "-o $@" type :implicit index nil)) #("LINK.m" 0 1 (annot "<Implicit>" meta "$(OBJC) $(OBJCFLAGS) $(CPPFLAGS) $(LDFLAGS) $(TARGET_ARCH)" type :implicit index nil)) #("PREPROCESS.F" 0 1 (annot "<Implicit>" meta "$(FC) $(FFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -F" type :implicit index nil)) #("CO" 0 1 (annot "<Implicit>" meta "Program for extracting a file from RCS; default 'co'." type :implicit index "index-CO")) #("RM" 0 1 (annot "<Implicit>" meta "Command to remove a file; default 'rm -f'." type :implicit index "index-RM")) #("CWEAVE" 0 1 (annot "<Implicit>" meta "Program to translate C Web into TeX; default 'cweave'." type :implicit index "index-CWEAVE")) #(".SHELLFLAGS" 0 1 (annot "<Implicit>" meta "-c" type :implicit index nil))) (dynamic #("MAKEFLAGS" 0 1 (annot "<Dynamic>" meta "Dynamic implicit variable" type :dynamic index nil)) #(".DEFAULT_GOAL" 0 1 (annot "<Dynamic>" meta "Dynamic implicit variable" type :dynamic index nil)) #("MAKEFILE_LIST" 0 1 (annot "<Dynamic>" meta "Dynamic implicit variable" type :dynamic index nil)) #("SHELL" 0 1 (annot "<Dynamic>" meta "Dynamic implicit variable" type :dynamic index nil)) #("CURDIR" 0 1 (annot "<Dynamic>" meta "Dynamic implicit variable" type :dynamic index nil))))
