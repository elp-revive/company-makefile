#s(hash-table size 217 test equal rehash-size 1.5 rehash-threshold 0.8125 data (".SHELLFLAGS" #s(company-makefile-vars ".SHELLFLAGS" "-c" "-c" "<Implicit>" "" :implicit) "CWEAVE" #s(company-makefile-vars "CWEAVE" "Program to translate C Web into TeX; default 'cweave'." "cweave" "<Implicit>" "index-CWEAVE" :implicit) "RM" #s(company-makefile-vars "RM" "Command to remove a file; default 'rm -f'." "rm -f" "<Implicit>" "index-RM" :implicit) "CO" #s(company-makefile-vars "CO" "Program for extracting a file from RCS; default 'co'." "co" "<Implicit>" "index-CO" :implicit) "PREPROCESS.F" #s(company-makefile-vars "PREPROCESS.F" "$(FC) $(FFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -F" "$(FC) $(FFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -F" "<Implicit>" "" :implicit) "LINK.m" #s(company-makefile-vars "LINK.m" "$(OBJC) $(OBJCFLAGS) $(CPPFLAGS) $(LDFLAGS) $(TARGET_ARCH)" "$(OBJC) $(OBJCFLAGS) $(CPPFLAGS) $(LDFLAGS) $(TARGET_ARCH)" "<Implicit>" "" :implicit) "OUTPUT_OPTION" #s(company-makefile-vars "OUTPUT_OPTION" "-o $@" "-o $@" "<Implicit>" "" :implicit) "COMPILE.cpp" #s(company-makefile-vars "COMPILE.cpp" "$(COMPILE.cc)" "$(COMPILE.cc)" "<Implicit>" "" :implicit) "LINK.p" #s(company-makefile-vars "LINK.p" "$(PC) $(PFLAGS) $(CPPFLAGS) $(LDFLAGS) $(TARGET_ARCH)" "$(PC) $(PFLAGS) $(CPPFLAGS) $(LDFLAGS) $(TARGET_ARCH)" "<Implicit>" "" :implicit) "CC" #s(company-makefile-vars "CC" "Program for compiling C programs; default 'cc'." "cc" "<Implicit>" "index-CC" :implicit) "COMPILE.f" #s(company-makefile-vars "COMPILE.f" "$(FC) $(FFLAGS) $(TARGET_ARCH) -c" "$(FC) $(FFLAGS) $(TARGET_ARCH) -c" "<Implicit>" "" :implicit) "CHECKOUT,v" #s(company-makefile-vars "CHECKOUT,v" "+$(if $(wildcard $@),,$(CO) $(COFLAGS) $< $@)" "+$(if $(wildcard $@),,$(CO) $(COFLAGS) $< $@)" "<Implicit>" "" :implicit) "CPP" #s(company-makefile-vars "CPP" "Program for running the C preprocessor, with results to standard output;
default '$(CC) -E'." "$(CC) -E" "<Implicit>" "index-CPP" :implicit) "LINK.cc" #s(company-makefile-vars "LINK.cc" "$(CXX) $(CXXFLAGS) $(CPPFLAGS) $(LDFLAGS) $(TARGET_ARCH)" "$(CXX) $(CXXFLAGS) $(CPPFLAGS) $(LDFLAGS) $(TARGET_ARCH)" "<Implicit>" "" :implicit) "MAKE_HOST" #s(company-makefile-vars "MAKE_HOST" "x86_64-pc-linux-gnu" "x86_64-pc-linux-gnu" "<Implicit>" "" :implicit) "LD" #s(company-makefile-vars "LD" "ld" "ld" "<Implicit>" "" :implicit) "TEXI2DVI" #s(company-makefile-vars "TEXI2DVI" "Program to make TeX DVI files from Texinfo source;
default 'texi2dvi'." "texi2dvi" "<Implicit>" "index-TEXI2DVI" :implicit) "YACC" #s(company-makefile-vars "YACC" "Program to use to turn Yacc grammars into source code; default 'yacc'." "yacc" "<Implicit>" "index-YACC" :implicit) "COMPILE.mod" #s(company-makefile-vars "COMPILE.mod" "$(M2C) $(M2FLAGS) $(MODFLAGS) $(TARGET_ARCH)" "$(M2C) $(M2FLAGS) $(MODFLAGS) $(TARGET_ARCH)" "<Implicit>" "" :implicit) "ARFLAGS" #s(company-makefile-vars "ARFLAGS" "Flags to give the archive-maintaining program; default 'rv'." "rv" "<Implicit>" "index-ARFLAGS" :implicit) "LINK.r" #s(company-makefile-vars "LINK.r" "$(FC) $(FFLAGS) $(RFLAGS) $(LDFLAGS) $(TARGET_ARCH)" "$(FC) $(FFLAGS) $(RFLAGS) $(LDFLAGS) $(TARGET_ARCH)" "<Implicit>" "" :implicit) "LINT" #s(company-makefile-vars "LINT" "Program to use to run lint on source code; default 'lint'." "lint" "<Implicit>" "index-LINT" :implicit) "LINT.c" #s(company-makefile-vars "LINT.c" "$(LINT) $(LINTFLAGS) $(CPPFLAGS) $(TARGET_ARCH)" "$(LINT) $(LINTFLAGS) $(CPPFLAGS) $(TARGET_ARCH)" "<Implicit>" "" :implicit) "YACC.m" #s(company-makefile-vars "YACC.m" "$(YACC) $(YFLAGS)" "$(YACC) $(YFLAGS)" "<Implicit>" "" :implicit) "AR" #s(company-makefile-vars "AR" "Archive-maintaining program; default 'ar'." "ar" "<Implicit>" "index-AR" :implicit) ".FEATURES" #s(company-makefile-vars ".FEATURES" "target-specific order-only second-expansion else-if shortest-stem undefine oneshell archives jobserver output-sync check-symlink load" "target-specific order-only second-expansion else-if shortest-stem undefine oneshell archives jobserver output-sync check-symlink load" "<Implicit>" "" :implicit) "TANGLE" #s(company-makefile-vars "TANGLE" "Program to translate Web into Pascal; default 'tangle'." "tangle" "<Implicit>" "index-TANGLE" :implicit) "GET" #s(company-makefile-vars "GET" "Program for extracting a file from SCCS; default 'get'." "get" "<Implicit>" "index-GET" :implicit) "COMPILE.F" #s(company-makefile-vars "COMPILE.F" "$(FC) $(FFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -c" "$(FC) $(FFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -c" "<Implicit>" "" :implicit) "CTANGLE" #s(company-makefile-vars "CTANGLE" "Program to translate C Web into C; default 'ctangle'." "ctangle" "<Implicit>" "index-CTANGLE" :implicit) ".LIBPATTERNS" #s(company-makefile-vars ".LIBPATTERNS" "lib%.so lib%.a" "lib%.so lib%.a" "<Implicit>" "" :implicit) "LINK.C" #s(company-makefile-vars "LINK.C" "$(LINK.cc)" "$(LINK.cc)" "<Implicit>" "" :implicit) "LINK.S" #s(company-makefile-vars "LINK.S" "$(CC) $(ASFLAGS) $(CPPFLAGS) $(LDFLAGS) $(TARGET_MACH)" "$(CC) $(ASFLAGS) $(CPPFLAGS) $(LDFLAGS) $(TARGET_MACH)" "<Implicit>" "" :implicit) "PREPROCESS.r" #s(company-makefile-vars "PREPROCESS.r" "$(FC) $(FFLAGS) $(RFLAGS) $(TARGET_ARCH) -F" "$(FC) $(FFLAGS) $(RFLAGS) $(TARGET_ARCH) -F" "<Implicit>" "" :implicit) "LINK.c" #s(company-makefile-vars "LINK.c" "$(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) $(TARGET_ARCH)" "$(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) $(TARGET_ARCH)" "<Implicit>" "" :implicit) "LINK.s" #s(company-makefile-vars "LINK.s" "$(CC) $(ASFLAGS) $(LDFLAGS) $(TARGET_MACH)" "$(CC) $(ASFLAGS) $(LDFLAGS) $(TARGET_MACH)" "<Implicit>" "" :implicit) "MAKE_VERSION" #s(company-makefile-vars "MAKE_VERSION" "4.1" "4.1" "<Implicit>" "" :implicit) "COMPILE.m" #s(company-makefile-vars "COMPILE.m" "$(OBJC) $(OBJCFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -c" "$(OBJC) $(OBJCFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -c" "<Implicit>" "" :implicit) "MAKE" #s(company-makefile-vars "MAKE" "$(MAKE_COMMAND)" "$(MAKE_COMMAND)" "<Implicit>" "" :implicit) "AS" #s(company-makefile-vars "AS" "Program for compiling assembly files; default 'as'." "as" "<Implicit>" "index-AS" :implicit) "PREPROCESS.S" #s(company-makefile-vars "PREPROCESS.S" "$(CC) -E $(CPPFLAGS)" "$(CC) -E $(CPPFLAGS)" "<Implicit>" "" :implicit) "COMPILE.p" #s(company-makefile-vars "COMPILE.p" "$(PC) $(PFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -c" "$(PC) $(PFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -c" "<Implicit>" "" :implicit) "FC" #s(company-makefile-vars "FC" "Program for compiling or preprocessing Fortran and Ratfor programs;
default 'f77'." "f77" "<Implicit>" "index-FC" :implicit) "WEAVE" #s(company-makefile-vars "WEAVE" "Program to translate Web into TeX; default 'weave'." "weave" "<Implicit>" "index-WEAVE" :implicit) "MAKE_COMMAND" #s(company-makefile-vars "MAKE_COMMAND" "make" "make" "<Implicit>" "" :implicit) "LINK.cpp" #s(company-makefile-vars "LINK.cpp" "$(LINK.cc)" "$(LINK.cc)" "<Implicit>" "" :implicit) "F77" #s(company-makefile-vars "F77" "$(FC)" "$(FC)" "<Implicit>" "" :implicit) ".VARIABLES" #s(company-makefile-vars ".VARIABLES" "" "" "<Implicit>" "" :implicit) "PC" #s(company-makefile-vars "PC" "Program for compiling Pascal programs; default 'pc'." "pc" "<Implicit>" "index-PC" :implicit) "COMPILE.def" #s(company-makefile-vars "COMPILE.def" "$(M2C) $(M2FLAGS) $(DEFFLAGS) $(TARGET_ARCH)" "$(M2C) $(M2FLAGS) $(DEFFLAGS) $(TARGET_ARCH)" "<Implicit>" "" :implicit) "LEX" #s(company-makefile-vars "LEX" "Program to use to turn Lex grammars into source code; default 'lex'." "lex" "<Implicit>" "index-LEX" :implicit) "LEX.l" #s(company-makefile-vars "LEX.l" "$(LEX) $(LFLAGS) -t" "$(LEX) $(LFLAGS) -t" "<Implicit>" "" :implicit) "LEX.m" #s(company-makefile-vars "LEX.m" "$(LEX) $(LFLAGS) -t" "$(LEX) $(LFLAGS) -t" "<Implicit>" "" :implicit) "COMPILE.r" #s(company-makefile-vars "COMPILE.r" "$(FC) $(FFLAGS) $(RFLAGS) $(TARGET_ARCH) -c" "$(FC) $(FFLAGS) $(RFLAGS) $(TARGET_ARCH) -c" "<Implicit>" "" :implicit) "M2C" #s(company-makefile-vars "M2C" "Program to use to compile Modula-2 source code; default 'm2c'." "m2c" "<Implicit>" "index-M2C" :implicit) "MAKEFILES" #s(company-makefile-vars "MAKEFILES" "" "" "<Implicit>" "" :implicit) "COMPILE.cc" #s(company-makefile-vars "COMPILE.cc" "$(CXX) $(CXXFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -c" "$(CXX) $(CXXFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -c" "<Implicit>" "" :implicit) "CXX" #s(company-makefile-vars "CXX" "Program for compiling C++ programs; default 'g++'." "g++" "<Implicit>" "index-CXX" :implicit) "COFLAGS" #s(company-makefile-vars "COFLAGS" "Extra flags to give to the RCS co program." "" "<Implicit>" "index-COFLAGS" :implicit) "COMPILE.C" #s(company-makefile-vars "COMPILE.C" "$(COMPILE.cc)" "$(COMPILE.cc)" "<Implicit>" "" :implicit) "COMPILE.S" #s(company-makefile-vars "COMPILE.S" "$(CC) $(ASFLAGS) $(CPPFLAGS) $(TARGET_MACH) -c" "$(CC) $(ASFLAGS) $(CPPFLAGS) $(TARGET_MACH) -c" "<Implicit>" "" :implicit) "LINK.F" #s(company-makefile-vars "LINK.F" "$(FC) $(FFLAGS) $(CPPFLAGS) $(LDFLAGS) $(TARGET_ARCH)" "$(FC) $(FFLAGS) $(CPPFLAGS) $(LDFLAGS) $(TARGET_ARCH)" "<Implicit>" "" :implicit) "SUFFIXES" #s(company-makefile-vars "SUFFIXES" ".out .a .ln .o .c .cc .C .cpp .p .f .F .m .r .y .l .ym .yl .s .S .mod .sym .def .h .info .dvi .tex .texinfo .texi .txinfo .w .ch .web .sh .elc .el" ".out .a .ln .o .c .cc .C .cpp .p .f .F .m .r .y .l .ym .yl .s .S .mod .sym .def .h .info .dvi .tex .texinfo .texi .txinfo .w .ch .web .sh .elc .el" "<Implicit>" "" :implicit) "COMPILE.c" #s(company-makefile-vars "COMPILE.c" "$(CC) $(CFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -c" "$(CC) $(CFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -c" "<Implicit>" "" :implicit) "COMPILE.s" #s(company-makefile-vars "COMPILE.s" "$(AS) $(ASFLAGS) $(TARGET_MACH)" "$(AS) $(ASFLAGS) $(TARGET_MACH)" "<Implicit>" "" :implicit) "YACC.y" #s(company-makefile-vars "YACC.y" "$(YACC) $(YFLAGS)" "$(YACC) $(YFLAGS)" "<Implicit>" "" :implicit) ".INCLUDE_DIRS" #s(company-makefile-vars ".INCLUDE_DIRS" "/usr/include /usr/local/include /usr/include" "/usr/include /usr/local/include /usr/include" "<Implicit>" "" :implicit) ".RECIPEPREFIX" #s(company-makefile-vars ".RECIPEPREFIX" "" "" "<Implicit>" "" :implicit) "MAKEINFO" #s(company-makefile-vars "MAKEINFO" "Program to convert a Texinfo source file into an Info file; default
'makeinfo'." "makeinfo" "<Implicit>" "index-MAKEINFO" :implicit) "OBJC" #s(company-makefile-vars "OBJC" "cc" "cc" "<Implicit>" "" :implicit) "LINK.f" #s(company-makefile-vars "LINK.f" "$(FC) $(FFLAGS) $(LDFLAGS) $(TARGET_ARCH)" "$(FC) $(FFLAGS) $(LDFLAGS) $(TARGET_ARCH)" "<Implicit>" "" :implicit) "TEX" #s(company-makefile-vars "TEX" "Program to make TeX DVI files from TeX source;
default 'tex'." "tex" "<Implicit>" "index-TEX" :implicit) "F77FLAGS" #s(company-makefile-vars "F77FLAGS" "$(FFLAGS)" "$(FFLAGS)" "<Implicit>" "" :implicit) "LINK.o" #s(company-makefile-vars "LINK.o" "$(CC) $(LDFLAGS) $(TARGET_ARCH)" "$(CC) $(LDFLAGS) $(TARGET_ARCH)" "<Implicit>" "" :implicit) "<D" #s(company-makefile-vars "<D" "Directory part of first prerequiste." "$(patsubst %/,%,$(dir $<))" "<Var>" "" :var) "?F" #s(company-makefile-vars "?F" "List of basenames of all prereqs newer than target." "$(notdir $?)" "<Var>" "" :var) "?D" #s(company-makefile-vars "?D" "List of directory parts of all prereqs newer than target." "$(patsubst %/,%,$(dir $?))" "<Var>" "" :var) "@D" #s(company-makefile-vars "@D" "Directory part of file name of target with trailing slash removed." "$(patsubst %/,%,$(dir $@))" "<Var>" "" :var) "@F" #s(company-makefile-vars "@F" "Basename of target - equivalent to $(notdir $@)" "$(notdir $@)" "<Var>" "" :var) "%F" #s(company-makefile-vars "%F" "Basename part of target archive member name." "$(notdir $%)" "<Var>" "" :var) "*F" #s(company-makefile-vars "*F" "Basename part of stem." "$(notdir $*)" "<Var>" "" :var) "+F" #s(company-makefile-vars "+F" "$(notdir $+)" "$(notdir $+)" "<Var>" "" :var) "^D" #s(company-makefile-vars "^D" "List of directory parts of all prereqs." "$(patsubst %/,%,$(dir $^))" "<Var>" "" :var) "%D" #s(company-makefile-vars "%D" "Directory part of target archive member name." "$(patsubst %/,%,$(dir $%))" "<Var>" "" :var) "*D" #s(company-makefile-vars "*D" "Directory part of stem." "$(patsubst %/,%,$(dir $*))" "<Var>" "" :var) "+D" #s(company-makefile-vars "+D" "$(patsubst %/,%,$(dir $+))" "$(patsubst %/,%,$(dir $+))" "<Var>" "" :var) "<F" #s(company-makefile-vars "<F" "Basename part of first prerequiste." "$(notdir $<)" "<Var>" "" :var) "^F" #s(company-makefile-vars "^F" "List of basenames of all prereqs." "$(notdir $^)" "<Var>" "" :var) "CURDIR" #s(company-makefile-vars "CURDIR" "" "" "<Dynamic>" "" :dynamic) "SHELL" #s(company-makefile-vars "SHELL" "/bin/sh" "/bin/sh" "<Dynamic>" "" :dynamic) "MAKEFILE_LIST" #s(company-makefile-vars "MAKEFILE_LIST" "" "" "<Dynamic>" "" :dynamic) ".DEFAULT_GOAL" #s(company-makefile-vars ".DEFAULT_GOAL" "" "" "<Dynamic>" "" :dynamic) "MAKEFLAGS" #s(company-makefile-vars "MAKEFLAGS" "" "" "<Dynamic>" "" :dynamic) "ASFLAGS" #s(company-makefile-vars "ASFLAGS" "Extra flags to give to the assembler (when explicitly
invoked on a '.s' or '.S' file)." "" "<Implicit>" "index-ASFLAGS" :implicit) "CFLAGS" #s(company-makefile-vars "CFLAGS" "Extra flags to give to the C compiler." "" "<Implicit>" "index-CFLAGS" :implicit) "CXXFLAGS" #s(company-makefile-vars "CXXFLAGS" "Extra flags to give to the C++ compiler." "" "<Implicit>" "index-CXXFLAGS" :implicit) "CPPFLAGS" #s(company-makefile-vars "CPPFLAGS" "Extra flags to give to the C preprocessor and programs
that use it (the C and Fortran compilers)." "" "<Implicit>" "index-CPPFLAGS" :implicit) "FFLAGS" #s(company-makefile-vars "FFLAGS" "Extra flags to give to the Fortran compiler." "" "<Implicit>" "index-FFLAGS" :implicit) "GFLAGS" #s(company-makefile-vars "GFLAGS" "Extra flags to give to the SCCS get program." "" "<Implicit>" "index-GFLAGS" :implicit) "LDFLAGS" #s(company-makefile-vars "LDFLAGS" "Extra flags to give to compilers when they are supposed to invoke the linker,
'ld', such as -L.  Libraries (-lfoo) should be
added to the LDLIBS variable instead." "" "<Implicit>" "index-LDFLAGS" :implicit) "LDLIBS" #s(company-makefile-vars "LDLIBS" "Library flags or names given to compilers when they are supposed to
invoke the linker, 'ld'.  LOADLIBES is a deprecated (but
still supported) alternative to LDLIBS.  Non-library linker
flags, such as -L, should go in the LDFLAGS variable." "" "<Implicit>" "index-LDLIBS" :implicit) "LFLAGS" #s(company-makefile-vars "LFLAGS" "Extra flags to give to Lex." "" "<Implicit>" "index-LFLAGS" :implicit) "YFLAGS" #s(company-makefile-vars "YFLAGS" "Extra flags to give to Yacc." "" "<Implicit>" "index-YFLAGS" :implicit) "PFLAGS" #s(company-makefile-vars "PFLAGS" "Extra flags to give to the Pascal compiler." "" "<Implicit>" "index-PFLAGS" :implicit) "RFLAGS" #s(company-makefile-vars "RFLAGS" "Extra flags to give to the Fortran compiler for Ratfor programs." "" "<Implicit>" "index-RFLAGS" :implicit) "LINTFLAGS" #s(company-makefile-vars "LINTFLAGS" "Extra flags to give to lint." "" "<Implicit>" "index-LINTFLAGS" :implicit) "@" #s(company-makefile-vars "@" "Target name" "" "<Var>" "" :var) "%" #s(company-makefile-vars "%" "Target member name, eg. target=foo.a(bar.o), then '$%'=bar.o and '$@'=foo.a" "" "<Var>" "" :var) "<" #s(company-makefile-vars "<" "Name of first prerequisite" "" "<Var>" "" :var) "?" #s(company-makefile-vars "?" "Names of all prerequisites newer than target" "" "<Var>" "" :var) "^" #s(company-makefile-vars "^" "Names of all prerequisites (no duplicates)" "" "<Var>" "" :var) "+" #s(company-makefile-vars "+" "Like '^', but with duplicates" "" "<Var>" "" :var) "|" #s(company-makefile-vars "|" "Names of all order-only prerequisites" "" "<Var>" "" :var) "*" #s(company-makefile-vars "*" "Stem of implicit rule, eg. target=dir/a.foo.a, pattern=a.%.b, then dir/a" "" "<Var>" "" :var) #("-sinclude" 0 1 (annot "Keyword <Gmake>" meta "")) #s(company-makefile-vars #("-sinclude" 0 1 (annot "Keyword <Gmake>" meta "")) "" "" "<Keyword>" "" :keyword) #("sinclude" 0 1 (annot "Keyword <Gmake>" meta "")) #s(company-makefile-vars #("sinclude" 0 1 (annot "Keyword <Gmake>" meta "")) "" "" "<Keyword>" "" :keyword) #("ifdef" 0 1 (annot "Keyword <Gmake>" meta "")) #s(company-makefile-vars #("ifdef" 0 1 (annot "Keyword <Gmake>" meta "")) "" "" "<Keyword>" "" :keyword) #("ifndef" 0 1 (annot "Keyword <Gmake>" meta "")) #s(company-makefile-vars #("ifndef" 0 1 (annot "Keyword <Gmake>" meta "")) "" "" "<Keyword>" "" :keyword) #("ifeq" 0 1 (annot "Keyword <Gmake>" meta "")) #s(company-makefile-vars #("ifeq" 0 1 (annot "Keyword <Gmake>" meta "")) "" "" "<Keyword>" "" :keyword) #("ifneq" 0 1 (annot "Keyword <Gmake>" meta "")) #s(company-makefile-vars #("ifneq" 0 1 (annot "Keyword <Gmake>" meta "")) "" "" "<Keyword>" "" :keyword) #("-include" 0 1 (annot "Keyword <Gmake>" meta "")) #s(company-makefile-vars #("-include" 0 1 (annot "Keyword <Gmake>" meta "")) "" "" "<Keyword>" "" :keyword) #("define" 0 1 (annot "Keyword <Gmake>" meta "")) #s(company-makefile-vars #("define" 0 1 (annot "Keyword <Gmake>" meta "")) "" "" "<Keyword>" "" :keyword) #("endef" 0 1 (annot "Keyword <Gmake>" meta "")) #s(company-makefile-vars #("endef" 0 1 (annot "Keyword <Gmake>" meta "")) "" "" "<Keyword>" "" :keyword) #("export" 0 1 (annot "Keyword <Gmake>" meta "")) #s(company-makefile-vars #("export" 0 1 (annot "Keyword <Gmake>" meta "")) "" "" "<Keyword>" "" :keyword) #("override define" 0 1 (annot "Keyword <Gmake>" meta "")) #s(company-makefile-vars #("override define" 0 1 (annot "Keyword <Gmake>" meta "")) "" "" "<Keyword>" "" :keyword) #("override" 0 1 (annot "Keyword <Gmake>" meta "")) #s(company-makefile-vars #("override" 0 1 (annot "Keyword <Gmake>" meta "")) "" "" "<Keyword>" "" :keyword) #("unexport" 0 1 (annot "Keyword <Gmake>" meta "")) #s(company-makefile-vars #("unexport" 0 1 (annot "Keyword <Gmake>" meta "")) "" "" "<Keyword>" "" :keyword) #("vpath" 0 1 (annot "Keyword <Gmake>" meta "")) #s(company-makefile-vars #("vpath" 0 1 (annot "Keyword <Gmake>" meta "")) "" "" "<Keyword>" "" :keyword) #("else" 0 1 (annot "Keyword <Gmake>" meta "")) #s(company-makefile-vars #("else" 0 1 (annot "Keyword <Gmake>" meta "")) "" "" "<Keyword>" "" :keyword) #("endif" 0 1 (annot "Keyword <Gmake>" meta "")) #s(company-makefile-vars #("endif" 0 1 (annot "Keyword <Gmake>" meta "")) "" "" "<Keyword>" "" :keyword) #("include" 0 1 (annot "Keyword <Gmake>" meta "")) #s(company-makefile-vars #("include" 0 1 (annot "Keyword <Gmake>" meta "")) "" "" "<Keyword>" "" :keyword) (#("subst" 0 1 (annot "Function <Gmake>" meta "" uri :fun)) "From" "To" "In") #s(company-makefile-vars (#("subst" 0 1 (annot "Function <Gmake>" meta "" uri :fun)) "From" "To" "In") "" "" "<Function>" "" :function) (#("patsubst" 0 1 (annot "Function <Gmake>" meta "" uri :fun)) "Pattern" "Replacement" "In") #s(company-makefile-vars (#("patsubst" 0 1 (annot "Function <Gmake>" meta "" uri :fun)) "Pattern" "Replacement" "In") "" "" "<Function>" "" :function) (#("strip" 0 1 (annot "Function <Gmake>" meta "" uri :fun)) "Text") #s(company-makefile-vars (#("strip" 0 1 (annot "Function <Gmake>" meta "" uri :fun)) "Text") "" "" "<Function>" "" :function) (#("findstring" 0 1 (annot "Function <Gmake>" meta "" uri :fun)) "Find what" "In") #s(company-makefile-vars (#("findstring" 0 1 (annot "Function <Gmake>" meta "" uri :fun)) "Find what" "In") "" "" "<Function>" "" :function) (#("filter" 0 1 (annot "Function <Gmake>" meta "" uri :fun)) "Pattern" "Text") #s(company-makefile-vars (#("filter" 0 1 (annot "Function <Gmake>" meta "" uri :fun)) "Pattern" "Text") "" "" "<Function>" "" :function) (#("filter-out" 0 1 (annot "Function <Gmake>" meta "" uri :fun)) "Pattern" "Text") #s(company-makefile-vars (#("filter-out" 0 1 (annot "Function <Gmake>" meta "" uri :fun)) "Pattern" "Text") "" "" "<Function>" "" :function) (#("sort" 0 1 (annot "Function <Gmake>" meta "" uri :fun)) "List") #s(company-makefile-vars (#("sort" 0 1 (annot "Function <Gmake>" meta "" uri :fun)) "List") "" "" "<Function>" "" :function) (#("dir" 0 1 (annot "Function <Gmake>" meta "" uri :fun)) "Names") #s(company-makefile-vars (#("dir" 0 1 (annot "Function <Gmake>" meta "" uri :fun)) "Names") "" "" "<Function>" "" :function) (#("notdir" 0 1 (annot "Function <Gmake>" meta "" uri :fun)) "Names") #s(company-makefile-vars (#("notdir" 0 1 (annot "Function <Gmake>" meta "" uri :fun)) "Names") "" "" "<Function>" "" :function) (#("suffix" 0 1 (annot "Function <Gmake>" meta "" uri :fun)) "Names") #s(company-makefile-vars (#("suffix" 0 1 (annot "Function <Gmake>" meta "" uri :fun)) "Names") "" "" "<Function>" "" :function) (#("basename" 0 1 (annot "Function <Gmake>" meta "" uri :fun)) "Names") #s(company-makefile-vars (#("basename" 0 1 (annot "Function <Gmake>" meta "" uri :fun)) "Names") "" "" "<Function>" "" :function) (#("addprefix" 0 1 (annot "Function <Gmake>" meta "" uri :fun)) "Prefix" "Names") #s(company-makefile-vars (#("addprefix" 0 1 (annot "Function <Gmake>" meta "" uri :fun)) "Prefix" "Names") "" "" "<Function>" "" :function) (#("addsuffix" 0 1 (annot "Function <Gmake>" meta "" uri :fun)) "Suffix" "Names") #s(company-makefile-vars (#("addsuffix" 0 1 (annot "Function <Gmake>" meta "" uri :fun)) "Suffix" "Names") "" "" "<Function>" "" :function) (#("join" 0 1 (annot "Function <Gmake>" meta "" uri :fun)) "List 1" "List 2") #s(company-makefile-vars (#("join" 0 1 (annot "Function <Gmake>" meta "" uri :fun)) "List 1" "List 2") "" "" "<Function>" "" :function) (#("word" 0 1 (annot "Function <Gmake>" meta "" uri :fun)) "Index" "Text") #s(company-makefile-vars (#("word" 0 1 (annot "Function <Gmake>" meta "" uri :fun)) "Index" "Text") "" "" "<Function>" "" :function) (#("words" 0 1 (annot "Function <Gmake>" meta "" uri :fun)) "Text") #s(company-makefile-vars (#("words" 0 1 (annot "Function <Gmake>" meta "" uri :fun)) "Text") "" "" "<Function>" "" :function) (#("firstword" 0 1 (annot "Function <Gmake>" meta "" uri :fun)) "Text") #s(company-makefile-vars (#("firstword" 0 1 (annot "Function <Gmake>" meta "" uri :fun)) "Text") "" "" "<Function>" "" :function) (#("wildcard" 0 1 (annot "Function <Gmake>" meta "" uri :fun)) "Pattern") #s(company-makefile-vars (#("wildcard" 0 1 (annot "Function <Gmake>" meta "" uri :fun)) "Pattern") "" "" "<Function>" "" :function) (#("foreach" 0 1 (annot "Function <Gmake>" meta "" uri :fun)) "Variable" "List" "Text") #s(company-makefile-vars (#("foreach" 0 1 (annot "Function <Gmake>" meta "" uri :fun)) "Variable" "List" "Text") "" "" "<Function>" "" :function) (#("origin" 0 1 (annot "Function <Gmake>" meta "" uri :fun)) "Variable") #s(company-makefile-vars (#("origin" 0 1 (annot "Function <Gmake>" meta "" uri :fun)) "Variable") "" "" "<Function>" "" :function) (#("shell" 0 1 (annot "Function <Gmake>" meta "" uri :fun)) "Command") #s(company-makefile-vars (#("shell" 0 1 (annot "Function <Gmake>" meta "" uri :fun)) "Command") "" "" "<Function>" "" :function) "abspath" #s(company-makefile-vars "abspath" "" "" "<Function>" "" :function) "realpath" #s(company-makefile-vars "realpath" "" "" "<Function>" "" :function)))